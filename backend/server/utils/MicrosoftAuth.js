// filepath: c:\Projects\VTRepos\hackathon\backend\server\utils\MicrosoftAuth.js
// Generated by Copilot
const passport = require("passport");
const MicrosoftStrategy = require("passport-microsoft").Strategy;
const { User } = require("../models/user");
const { EncryptionManager } = require("./encryption");
const { makeJWT } = require("./middleware/validatedRequest");
const { EventLogs } = require("../models/eventLogs");
const Telemetry = require("./telemetry");
const crypto = require("crypto");

class MicrosoftAuthManager {
  constructor() {
    this.clientID = process.env.MICROSOFT_CLIENT_ID;
    this.clientSecret = process.env.MICROSOFT_CLIENT_SECRET;
    this.callbackURL = process.env.MICROSOFT_CALLBACK_URL || "http://localhost:3001/oauth/microsoft/callback";
    this.strategy = null;
    this.isEnabled = false;

    // Initialize if credentials are available
    this.initialize();
  }

  initialize() {
    if (!this.clientID || !this.clientSecret) {
      console.warn("Microsoft OAuth is not configured. Set MICROSOFT_CLIENT_ID and MICROSOFT_CLIENT_SECRET environment variables to enable it.");
      this.isEnabled = false;
      return;
    }

    try {
      this.strategy = new MicrosoftStrategy(
        {
          clientID: this.clientID,
          clientSecret: this.clientSecret,
          callbackURL: this.callbackURL,
          scope: ["user.read", "profile", "email", "offline_access"],
          tenant: "common",
        },
        this.verifyCallback.bind(this)
      );

      passport.use(this.strategy);
      this.isEnabled = true;
      console.log("Microsoft OAuth authentication initialized successfully");
    } catch (error) {
      console.error("Failed to initialize Microsoft OAuth:", error);
      this.isEnabled = false;
    }
  }

  async verifyCallback(accessToken, refreshToken, profile, done) {
    try {
      if (!profile || !profile.id) {
        await EventLogs.logEvent("failed_login_microsoft_invalid_profile", { error: "Invalid profile" });
        return done(new Error("Invalid profile from Microsoft"), null);
      }

      // Check if user exists with this Microsoft ID
      let user = await User._get({ microsoftId: profile.id });
      
      if (user) {
        // User exists, update last login
        const updates = { 
          lastLoginAt: new Date(),
          lastUpdatedAt: new Date(),
          microsoftRefreshToken: refreshToken // Store refresh token for future use
        };
        
        // Update email if it changed
        if (profile.emails && profile.emails.length > 0 && user.email !== profile.emails[0].value) {
          updates.email = profile.emails[0].value;
        }
        
        await User._update(user.id, updates);
        await EventLogs.logEvent("login_success_microsoft", {
          userId: user.id,
          username: user.username
        });
        return done(null, user);
      }
      
      // First-time login, create new user
      const email = profile.emails && profile.emails.length > 0 
        ? profile.emails[0].value 
        : null;
      
      // Generate a username based on the profile
      let username = email 
        ? email.split('@')[0] 
        : profile.displayName.replace(/[^a-zA-Z0-9_-]/g, '').toLowerCase();
      
      // Check if username already exists, append random string if needed
      const existingUser = await User._get({ username });
      if (existingUser) {
        username = `${username}_${crypto.randomBytes(4).toString('hex')}`;
      }
      
      // Generate a random password since password is required in the schema
      // User will never use this password since they'll authenticate via Microsoft
      const password = crypto.randomBytes(24).toString('hex');
      
      const { user: newUser, error } = await User.create({
        username,
        password,
        role: "default", // Default role for new users
        email,
        microsoftId: profile.id,
        microsoftRefreshToken: refreshToken,
        bio: `Microsoft user: ${profile.displayName}`,
      });
      
      if (error || !newUser) {
        await EventLogs.logEvent("failed_registration_microsoft", {
          error,
          email,
          displayName: profile.displayName
        });
        return done(new Error("Failed to create user"), null);
      }
      
      // Get full user with all fields
      const createdUser = await User._get({ id: newUser.id });
      
      // Log the registration
      await EventLogs.logEvent(
        "user_registered_microsoft",
        {
          username: createdUser.username,
          email: email || "No email provided",
          displayName: profile.displayName,
        },
        createdUser.id
      );
      
      await Telemetry.sendTelemetry("microsoft_oauth_registration");
      return done(null, createdUser);
    } catch (error) {
      console.error("Microsoft OAuth verification error:", error);
      await EventLogs.logEvent("microsoft_oauth_error", { error: error.message });
      return done(error, null);
    }
  }

  setupRoutes(app) {
    if (!this.isEnabled) {
      return false;
    }

    // Initialize passport 
    app.use(passport.initialize());

    // Login route
    app.get(
      "/oauth/microsoft",
      passport.authenticate("microsoft", { 
        session: false,
        prompt: 'select_account' // Always show account picker
      })
    );

    // Callback route
    app.get(
      "/oauth/microsoft/callback",
      passport.authenticate("microsoft", { 
        session: false, 
        failureRedirect: "/login?error=microsoft_auth_failed" 
      }),
      async (req, res) => {
        try {
          if (!req.user) {
            await EventLogs.logEvent("failed_login_microsoft_no_user");
            return res.redirect("/login?error=no_user");
          }

          // Log the login event
          await EventLogs.logEvent(
            "login_event_microsoft",
            {
              ip: req.ip || "Unknown IP",
              username: req.user.username || "Unknown user",
              multiUserMode: true,
            },
            req.user.id
          );

          // Create JWT token for the user
          const token = makeJWT(
            { id: req.user.id, username: req.user.username },
            "30d"
          );

          // Redirect to the frontend SSO handler
          return res.redirect(`/login/sso/simple?token=${encodeURIComponent(token)}`);
        } catch (error) {
          console.error("Microsoft OAuth callback error:", error);
          await EventLogs.logEvent("microsoft_oauth_callback_error", { error: error.message });
          return res.redirect("/login?error=auth_error");
        }
      }
    );

    return true;
  }
}

module.exports = { MicrosoftAuthManager };