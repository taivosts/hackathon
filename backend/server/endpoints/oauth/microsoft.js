// Generated by Copilot
const express = require('express');
const router = express.Router();
const { MicrosoftAuthManager } = require('../../utils/auth/microsoft');

router.get('/microsoft-oauth-status', async (req, res) => {
  try {
    const msAuth = new MicrosoftAuthManager();
    const enabled = await msAuth.isEnabled();
    const loginUrl = enabled ? await msAuth.getLoginUrl() : null;
    return res.status(200).json({ enabled, loginUrl });
  } catch (error) {
    console.error('Error checking Microsoft OAuth status:', error);
    return res.status(500).json({ enabled: false, loginUrl: null });
  }
});

router.get('/auth/microsoft/login', async (req, res) => {
  try {
    const msAuth = new MicrosoftAuthManager();
    if (!await msAuth.isEnabled()) {
      return res.status(400).json({ success: false, message: 'Microsoft OAuth is not enabled' });
    }
    const loginUrl = await msAuth.getLoginUrl();
    res.redirect(loginUrl);
  } catch (error) {
    console.error('Error initiating Microsoft login:', error);
    res.status(500).json({ success: false, message: 'Failed to initiate Microsoft login' });
  }
});

router.get('/auth/microsoft/callback', async (req, res) => {
  try {
    const { code, state } = req.query;
    const msAuth = new MicrosoftAuthManager();
    
    if (!code || !state) {
      return res.status(400).json({ success: false, message: 'Invalid OAuth callback' });
    }

    const { user, token } = await msAuth.handleCallback(code, state);
    if (!user || !token) {
      return res.status(401).json({ success: false, message: 'Authentication failed' });
    }

    // Set JWT token in cookie
    res.cookie('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days
    });

    // Redirect to the main application
    res.redirect('/');
  } catch (error) {
    console.error('Error handling Microsoft callback:', error);
    res.status(500).json({ success: false, message: 'Failed to complete authentication' });
  }
});

module.exports = {
  router
};